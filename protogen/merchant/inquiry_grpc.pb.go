// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/merchant/inquiry.proto

package merchant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InquiryServicesClient is the client API for InquiryServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InquiryServicesClient interface {
	InquiryItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InquiryMerchantItemsModel, error)
	InquiryDiscounts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InquiryMerchantDiscountsModel, error)
}

type inquiryServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewInquiryServicesClient(cc grpc.ClientConnInterface) InquiryServicesClient {
	return &inquiryServicesClient{cc}
}

func (c *inquiryServicesClient) InquiryItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InquiryMerchantItemsModel, error) {
	out := new(InquiryMerchantItemsModel)
	err := c.cc.Invoke(ctx, "/InquiryServices/InquiryItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inquiryServicesClient) InquiryDiscounts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InquiryMerchantDiscountsModel, error) {
	out := new(InquiryMerchantDiscountsModel)
	err := c.cc.Invoke(ctx, "/InquiryServices/InquiryDiscounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InquiryServicesServer is the server API for InquiryServices service.
// All implementations must embed UnimplementedInquiryServicesServer
// for forward compatibility
type InquiryServicesServer interface {
	InquiryItems(context.Context, *emptypb.Empty) (*InquiryMerchantItemsModel, error)
	InquiryDiscounts(context.Context, *emptypb.Empty) (*InquiryMerchantDiscountsModel, error)
	mustEmbedUnimplementedInquiryServicesServer()
}

// UnimplementedInquiryServicesServer must be embedded to have forward compatible implementations.
type UnimplementedInquiryServicesServer struct {
}

func (UnimplementedInquiryServicesServer) InquiryItems(context.Context, *emptypb.Empty) (*InquiryMerchantItemsModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryItems not implemented")
}
func (UnimplementedInquiryServicesServer) InquiryDiscounts(context.Context, *emptypb.Empty) (*InquiryMerchantDiscountsModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryDiscounts not implemented")
}
func (UnimplementedInquiryServicesServer) mustEmbedUnimplementedInquiryServicesServer() {}

// UnsafeInquiryServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InquiryServicesServer will
// result in compilation errors.
type UnsafeInquiryServicesServer interface {
	mustEmbedUnimplementedInquiryServicesServer()
}

func RegisterInquiryServicesServer(s grpc.ServiceRegistrar, srv InquiryServicesServer) {
	s.RegisterService(&InquiryServices_ServiceDesc, srv)
}

func _InquiryServices_InquiryItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InquiryServicesServer).InquiryItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InquiryServices/InquiryItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InquiryServicesServer).InquiryItems(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InquiryServices_InquiryDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InquiryServicesServer).InquiryDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InquiryServices/InquiryDiscounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InquiryServicesServer).InquiryDiscounts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// InquiryServices_ServiceDesc is the grpc.ServiceDesc for InquiryServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InquiryServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InquiryServices",
	HandlerType: (*InquiryServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InquiryItems",
			Handler:    _InquiryServices_InquiryItems_Handler,
		},
		{
			MethodName: "InquiryDiscounts",
			Handler:    _InquiryServices_InquiryDiscounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/merchant/inquiry.proto",
}
